import pandas as pd
from fuzzywuzzy import fuzz
from tabulate import tabulate
import pyodbc  # for SQL Server connection

# Define your SQL Server connection parameters
server = 'your_server'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# Define SQL queries to fetch data from tables
query_source = 'SELECT column_name FROM source_table'
query_target = 'SELECT column_name FROM target_table'

# Create a function to establish a SQL Server connection and fetch data
def fetch_data(sql_query):
    conn = pyodbc.connect(f"Driver={{SQL Server}};Server={server};Database={database};UID={username};PWD={password}")
    data = pd.read_sql_query(sql_query, conn)
    conn.close()
    return data

# Function to find the best match for a source string in the target DataFrame
def find_best_match(source_str, target_df):
    best_match, similarity = None, None
    highest_similarity = -1  # Initialize with a low value
    
    for index, row in target_df.iterrows():
        target_str = row['column_name']
        current_similarity = fuzz.ratio(source_str, target_str)
        
        if current_similarity > highest_similarity:
            highest_similarity = current_similarity
            best_match = target_str
            similarity = current_similarity
    
    return best_match, similarity

# Fetch data from SQL Server and load it into DataFrames
source_data = fetch_data(query_source)
target_data = fetch_data(query_target)

# Iterate through the source DataFrame and find the best match in the target DataFrame
matches = []
for index, row in source_data.iterrows():
    source_str = row['column_name']
    best_match, similarity = find_best_match(source_str, target_data)
    
    # Capitalize both sides
    source_str = source_str.capitalize()
    best_match = best_match.capitalize()
    
    matches.append((source_str, best_match, similarity))

# Create a DataFrame to store the results
results_df = pd.DataFrame(matches, columns=['Source', 'BestMatch', 'Similarity'])

# Write the results to a third table in SQL Server
conn = pyodbc.connect(f"Driver={{SQL Server}};Server={server};Database={database};UID={username};PWD={password}")
cursor = conn.cursor()

# Define SQL query to create the results table
create_table_query = '''
CREATE TABLE IF NOT EXISTS results_table (
    Source NVARCHAR(255),
    BestMatch NVARCHAR(255),
    Similarity INT
)
'''
cursor.execute(create_table_query)
conn.commit()

# Iterate through the results DataFrame and insert records into the results table
for index, row in results_df.iterrows():
    source_str = row['Source']
    best_match = row['BestMatch']
    similarity = row['Similarity']
    
    # Define the SQL INSERT query
    insert_query = '''
    INSERT INTO results_table (Source, BestMatch, Similarity)
    VALUES (?, ?, ?)
    '''
    cursor.execute(insert_query, (source_str, best_match, similarity))
    conn.commit()

# Close the database connection
conn.close()

# Convert the results DataFrame to a tabulated format
tabulated_results = tabulate(results_df, headers='keys', tablefmt='pretty')

# Print the formatted results
print(tabulated_results)
